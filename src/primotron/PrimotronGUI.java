/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package primotron;

import java.math.BigInteger;
import java.math.BigDecimal;
import java.util.Random;
import javax.swing.JOptionPane;
import java.awt.*;

/**
 *
 * @author pedja
 */
public class PrimotronGUI extends javax.swing.JFrame {

    /**
     * Creates new form PrimotronGUI
     */
    public PrimotronGUI() {
        initComponents();
        setIcon();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        numberLabel = new javax.swing.JLabel();
        numberTextField = new javax.swing.JTextField();
        accuracyLabel = new javax.swing.JLabel();
        accuracySlider = new javax.swing.JSlider();
        checkButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        resultLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Primotron");
        setResizable(false);

        numberLabel.setText("Number:");

        numberTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberTextFieldActionPerformed(evt);
            }
        });

        accuracyLabel.setText("Accuracy:");

        accuracySlider.setMajorTickSpacing(0);
        accuracySlider.setMinimum(1);
        accuracySlider.setValue(3);

        checkButton.setText("Check");
        checkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        resultLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        resultLabel.setMaximumSize(new java.awt.Dimension(108, 17));
        resultLabel.setMinimumSize(new java.awt.Dimension(108, 17));
        resultLabel.setPreferredSize(new java.awt.Dimension(108, 17));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(accuracyLabel)
                                .addComponent(numberLabel))
                            .addComponent(checkButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(clearButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(closeButton))
                            .addComponent(accuracySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(resultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {accuracyLabel, numberLabel});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {checkButton, clearButton, closeButton});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {accuracySlider, numberTextField});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numberLabel)
                    .addComponent(numberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(accuracyLabel)
                    .addComponent(accuracySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addComponent(resultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkButton)
                    .addComponent(clearButton)
                    .addComponent(closeButton))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {accuracyLabel, accuracySlider});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkButtonActionPerformed
        // TODO add your handling code here:
              Object source =evt.getSource();
		 if (source.equals(checkButton))
		 {
                     try{
        
        BigInteger n,m,b;
        BigDecimal bd;
        int k=accuracySlider.getValue();
        
        resultLabel.setText("");
        
        String expression = numberTextField.getText();
        
        Primotron primotron = new Primotron();
        
    	bd = primotron.eval(expression);
        if (bd.remainder( BigDecimal.ONE ).equals(BigDecimal.ZERO))
        {
            n=bd.toBigInteger();
        
        m=n;
        
        if(n.compareTo(BigInteger.valueOf(2))==-1)
        {
        JOptionPane.showMessageDialog(null, "Number must be greater than one!");
        numberTextField.setText("");
        }
        else if(n.equals(BigInteger.valueOf(2)) || n.equals(BigInteger.valueOf(3))) {
           resultLabel.setText("Probably prime!");     
                }
        else if(n.equals(BigInteger.valueOf(4))) {
           resultLabel.setText("Composite!");     
                }
        else {
            
       int j=0;
       
       for (int i = 1; i<=k; i++) {
     
     
     b=BigInteger.valueOf(primotron.generateRandomIntIntRange(-100,100));
      
        BigInteger maxLimita = n.subtract(BigInteger.valueOf(2));
      BigInteger minLimita = new BigInteger("2");
      BigInteger bigIntegera = maxLimita.subtract(minLimita);
      Random randNuma = new Random();
      int lena = maxLimita.bitLength();
       BigInteger a = new BigInteger(lena, randNuma);
      if (a.compareTo(minLimita) < 0)
         a = a.add(minLimita);
      if (a.compareTo(bigIntegera) >= 0)
         a = a.mod(bigIntegera).add(minLimita);
         
      if(!primotron.isprime(n,b,a,m))
        {
        
        resultLabel.setText("Composite!");
        
        j++;
        break;
        
        }
       
       }
       
       if(j==0) {
       
       resultLabel.setText("Probably prime!");
           
       }
        
        }
    }
        else {
        JOptionPane.showMessageDialog(null, "Invalid entry!");
        numberTextField.setText("");
        }
        }
        catch(Exception e) {
        JOptionPane.showMessageDialog(null, "Invalid entry!");
        numberTextField.setText("");
        }
                 }
                 
    }//GEN-LAST:event_checkButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        numberTextField.setText("");
        resultLabel.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void numberTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numberTextFieldActionPerformed

    static class Primotron {
    
    static boolean isprime(BigInteger n,BigInteger b,BigInteger a,BigInteger m) 
    { 
    BigInteger F[][] = new BigInteger[][]{{BigInteger.valueOf(2).multiply(a).mod(m),b.mod(m)},{BigInteger.ONE.mod(m),BigInteger.ZERO.mod(m)}}; 
    
    expBySquaring(F,n.subtract(BigInteger.ONE),b,a,m); 
    multiply2(F,a,m);
      
       return(F[0][0].equals(a)); 
    
    } 
    
    static void  multiply(BigInteger F[][], BigInteger M[][],BigInteger m) 
    { 
    
    
    BigInteger x =  (F[0][0].multiply(M[0][0])).add(F[0][1].multiply(M[1][0])); 
    BigInteger y =  (F[0][0].multiply(M[0][1])).add(F[0][1].multiply(M[1][1])); 
    BigInteger z =  (F[1][0].multiply(M[0][0])).add(F[1][1].multiply(M[1][0]));
    BigInteger w =  (F[1][0].multiply(M[0][1])).add(F[1][1].multiply(M[1][1]));
    
     
    
    F[0][0] = x.mod(m); 
    F[0][1] = y.mod(m); 
    F[1][0] = z.mod(m); 
    F[1][1] = w.mod(m);
    
    
    } 
    
    static void multiply2(BigInteger F[][],BigInteger a,BigInteger m) 
    { 
    BigInteger x =  (F[0][0].multiply(a)).add(F[0][1].multiply(BigInteger.ONE)); 
    BigInteger y =  (F[1][0].multiply(a)).add(F[1][1].multiply(BigInteger.ONE)); 
   
       
    F[0][0] = x.mod(m); 
    F[0][1] = y.mod(m); 
    
    
    } 
    
    
    static void expBySquaring(BigInteger F[][], BigInteger n,BigInteger b,BigInteger a,BigInteger m)
            {
      if( n.equals(BigInteger.ZERO) || n.equals(BigInteger.ONE))          
       return; 
    BigInteger M[][] = new BigInteger[][]{{BigInteger.valueOf(2).multiply(a).mod(m),b.mod(m)},{BigInteger.ONE.mod(m),BigInteger.ZERO.mod(m)}};  
     expBySquaring(F,n.shiftRight(1),b,a,m);
     multiply(F,F,m);
     if(n.mod(BigInteger.valueOf(2)).equals(BigInteger.ONE))
     multiply(F, M,m);
    }
    
    public static int generateRandomIntIntRange(int min, int max) {
    Random r = new Random();
    return r.nextInt((max - min) + 1) + min;
}
    
    public static BigDecimal eval(final String str) {
    return new Object() {
        int pos = -1, ch;

        void nextChar() {
            ch = (++pos < str.length()) ? str.charAt(pos) : -1;
        }

        boolean eat(int charToEat) {
            while (ch == ' ') nextChar();
            if (ch == charToEat) {
                nextChar();
                return true;
            }
            return false;
        }

        BigDecimal parse() {
            nextChar();
            BigDecimal x = parseExpression();
            if (pos < str.length()) throw new RuntimeException("Unexpected: " + (char)ch);
            return x;
        }

        // Grammar:
        // expression = term | expression `+` term | expression `-` term
        // term = factor | term `*` factor | term `/` factor
        // factor = `+` factor | `-` factor | `(` expression `)`
        //        | number | functionName factor | factor `^` factor

        BigDecimal parseExpression() {
            BigDecimal x = parseTerm();
            for (;;) {
                if      (eat('+')) x=x.add(parseTerm()); // addition
                else if (eat('-')) x=x.subtract(parseTerm()); // subtraction
                else return x;
            }
           }

        BigDecimal parseTerm() {
            BigDecimal x = parseFactor();
            for (;;) {
                if      (eat('*')) x=x.multiply(parseFactor()); // multiplication
                else if (eat('/')) x=x.divide(parseFactor()); // division
                else return x;
            }
        }

        BigDecimal parseFactor() {
            if (eat('+')) return parseFactor(); // unary plus
            if (eat('-')) return parseFactor().negate(); // unary minus

            BigDecimal x;
            int startPos = this.pos;
            if (eat('(')) { // parentheses
                x = parseExpression();
               if (!eat(')'))
               {
                throw new RuntimeException("Unexpected: " + (char)ch);   
               }
            } else if ((ch >= '0' && ch <= '9') || ch == '.') { // numbers
                while ((ch >= '0' && ch <= '9') || ch == '.') nextChar();
                x = new BigDecimal(str.substring(startPos, this.pos));
            }  else {
                throw new RuntimeException("Unexpected: " + (char)ch);
            }

            if (eat('^')) x =x.pow(parseFactor().intValue()); // exponentiation

            return x;
        }
    }.parse();
}
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrimotronGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrimotronGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrimotronGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrimotronGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PrimotronGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accuracyLabel;
    private javax.swing.JSlider accuracySlider;
    private javax.swing.JButton checkButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel numberLabel;
    private javax.swing.JTextField numberTextField;
    private javax.swing.JLabel resultLabel;
    // End of variables declaration//GEN-END:variables

    private void setIcon(){
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("Primotron.png")));
    }
}
